#####################################################################################################################
# Author: Marc Thomas
# Project: Cannibals and Missionaries
# Date: 9/28/2012
#
# Description:  These visuals represent a successful scenerio's of the Missionary/Cannibal logic problem.
#
#
# Implementation: Using the visual library in Python, representations of cannibals and missionaries,
#                as well as a background 'scene' are generated. A boat is also constructed as a means 
#                of crossing the river. The individuals along with the boat move from side to side
#                in an order generated by the 'logic' program which sends the visuals a vector
#                representing each move to be made to successfully cross the river without
#                violating the rules.
#####################################################################################################################
#
# Current Status:    Complete
#  Fully Functional
#  
# Additional Features:
#    Add more detail to scenery
#    Add more detail to cannibals and missionaries
######################################################################################################################

from visual import *

CONST_GROUND = -10;
CONST_BROWN = ((139.0/255.0), (69.0/255.0), (19.0/255.0))

CONST_MISSIONARYX = -12
CONST_MISSIONARYY = -8
CONST_MISSIONARYZ = 2


CONST_CANNIBALX = -12
CONST_CANNIBALY = -8
CONST_CANNIBALZ = -2

CONST_BOATX = -5
CONST_BOATZ = 0

#Each 'person' in contained in an index of an array.
missionaryArr = []
cannibalArr = []

#Track which side each person is on
missionaries = []
cannibals = []

#Track occupied spaces on each side
misStart = []
misGoal = []
canStart = []
canGoal = []


MIS_X = -1
CAN_X = -1
 

def vectors(mis, can, vec):
    
    global misStart
    global canStart
    for _ in range (mis):
        misStart.append(1)
        misGoal.append(0)
        missionaries.append(1)
        
    for _ in range(can):
        canStart.append(1)
        canGoal.append(0)
        cannibals.append(1)
        
    createMissionary(mis)
    createCannibal(can)
    
    first = ''
    second = ''
    j = -1
    turns = len(vec) - 1
    for _ in range (turns):
        j += 1
        if vec[j][0] == 1 or vec[j][0] == -1 :
            first = 'missionary'
        if vec[j][0] == 2 or vec[j][0] == -2:
            first = 'missionary'
            second = 'missionary'
            
        if vec[j][1] == 1 or vec[j][1] == -1:
            first = 'cannibal'
        if vec[j][1] == 2 or vec[j][1] == -2:
            first = 'cannibal'
            second = 'cannibal'
            
        if (vec[j][0] == 1 or vec[j][0]) == -1 and (vec[j][1] == 1 or vec[j][1] == -1):
                first = 'missionary'
                second = 'cannibal'
        
        moveToGoal(first, second)
        
        first = ''
        second = ''
        j += 1
        try:
            if vec[j][0] == 1 or vec[j][0] == -1:
                first = 'missionary'
            if vec[j][0] == 2 or vec[j][0] == -2:
                first = 'missionary'
                second = 'missionary'
                
            if vec[j][1] == 1 or vec[j][1] == -1:
                first = 'cannibal'
            if vec[j][1] == 2 or vec[j][1] == -2:
                first = 'cannibal'
                second = 'cannibal'
            if (vec[j][0] == 1 or vec[j][0]) == -1 and (vec[j][1] == 1 or vec[j][1] == -1):
                first = 'missionary'
                second = 'cannibal'
            moveToStart(first, second)
            
        except:
            print "Turns Complete" 
            break      
        
            
    
    
    
    
    
    
def moveToGoal(first, second):
    whichMissionary1 = 0
    whichCannibal1 = 0
    whichMissionary2 = 0
    whichCannibal2 = 0
    global MIS_X
    global CAN_X
    global misStart
    global misGoal
    global canStart
    global canGoal
    
    if first == 'missionary':
        for i in range (len(missionaries)):
            if missionaries[i] == 1:
                whichMissionary1 = i
                missionaries[i] = 0
                break
                
    if second == 'missionary':
        for i in range (len(missionaries)):
            if missionaries[i] == 1:
                whichMissionary2 = i
                missionaries[i] = 0
                break
        
    if first == 'cannibal':
        for i in range (len(cannibals)):
            if cannibals[i] == 1:
                whichCannibal1 = i
                cannibals[i] = 0
                break
        
    
    if second == 'cannibal':
        for i in range (len(cannibals)):
            if cannibals[i] == 1:
                whichCannibal2 = i
                cannibals[i] = 0
                break
    
        #move a to boat if they are the 'first' item
    if first == 'missionary':
        
        missionaryArr[whichMissionary1][0].pos = (-4, CONST_MISSIONARYY + 4, 0)
        missionaryArr[whichMissionary1][1].pos = (-4, CONST_MISSIONARYY, 0)
        missionaryArr[whichMissionary1][2].pos = (-4, CONST_GROUND, -.25)
        missionaryArr[whichMissionary1][3].pos = (-4, CONST_GROUND, +.25)
        missionaryArr[whichMissionary1][4].pos = (-4, CONST_MISSIONARYY, - 1)
        missionaryArr[whichMissionary1][5].pos = (-4, CONST_MISSIONARYY, + 1)
        i = misStart.index(1)
        misStart[i] = 0
        #move a cannibal to boat if they are the 'first' item
    if first == 'cannibal':
        cannibalArr[whichCannibal1][0].pos = (-4, CONST_MISSIONARYY + 4, 0)
        cannibalArr[whichCannibal1][1].pos = (-4, CONST_MISSIONARYY, 0)
        cannibalArr[whichCannibal1][2].pos = (-4, CONST_GROUND, -.25)
        cannibalArr[whichCannibal1][3].pos = (-4, CONST_GROUND, +.25)
        cannibalArr[whichCannibal1][4].pos = (-4, CONST_MISSIONARYY, - 1)
        cannibalArr[whichCannibal1][5].pos = (-4, CONST_MISSIONARYY, + 1)
        i = canStart.index(1)
        canStart[i] = 0

        #move a missionary to boat if they are the 'second' item
    if second == 'missionary':
        missionaryArr[whichMissionary2][0].pos = (-6, CONST_MISSIONARYY + 4, 0)
        missionaryArr[whichMissionary2][1].pos = (-6, CONST_MISSIONARYY, 0)
        missionaryArr[whichMissionary2][2].pos = (-6, CONST_GROUND, -.25)
        missionaryArr[whichMissionary2][3].pos = (-6, CONST_GROUND, +.25)
        missionaryArr[whichMissionary2][4].pos = (-6, CONST_MISSIONARYY, - 1)
        missionaryArr[whichMissionary2][5].pos = (-6, CONST_MISSIONARYY, + 1)
        i = misStart.index(1)
        misStart[i] = 0
        #move a cannibal to boat if they are the 'second' item
    if second == 'cannibal':
        cannibalArr[whichCannibal2][0].pos = (-6, CONST_MISSIONARYY + 4, 0)
        cannibalArr[whichCannibal2][1].pos = (-6, CONST_MISSIONARYY, 0)
        cannibalArr[whichCannibal2][2].pos = (-6, CONST_GROUND, -.25)
        cannibalArr[whichCannibal2][3].pos = (-6, CONST_GROUND, +.25)
        cannibalArr[whichCannibal2][4].pos = (-6, CONST_MISSIONARYY, - 1)
        cannibalArr[whichCannibal2][5].pos = (-6, CONST_MISSIONARYY, + 1)
        i = canStart.index(1)
        canStart[i] = 0
        
    base.velocity = vector(1,0,0)
    backSide.velocity = vector(1,0,0)
    frontSide.velocity = vector(1,0,0)
    leftSide.velocity = vector(1,0,0)
    rightSide.velocity = vector(1,0,0)

    head.velocity = vector(1,0,0)
    torso.velocity = vector(1,0,0)
    lLeg.velocity = vector(1,0,0)
    rLeg.velocity = vector(1,0,0)
    lArm.velocity = vector(1,0,0)
    rArm.velocity = vector(1,0,0)

    if base.x == CONST_BOATX:

        if first == 'missionary':
            MIS_X += 1
        if first == 'cannibal':
            CAN_X += 1
        if second == 'missionary':
            MIS_X += 1
        if second == 'cannibal':
            CAN_X += 1

        if first == 'missionary' and second == 'missionary':
            MIS_X -= 1
        if first == 'cannibal' and second == 'cannibal':
            CAN_X -= 1
            
            #move boat from start to goal side
        if base.x == CONST_BOATX:
            while base.x < (-CONST_BOATX):
                rate(20)
                base.pos = base.pos + base.velocity
                backSide.pos = backSide.pos + backSide.velocity
                frontSide.pos = frontSide.pos + frontSide.velocity
                leftSide.pos = leftSide.pos + leftSide.velocity
                rightSide.pos = rightSide.pos + rightSide.velocity

                    #move front seat person with boat from start to goal side/missionary
                if first == 'missionary':
                    missionaryArr[whichMissionary1][0].pos = missionaryArr[whichMissionary1][0].pos + head.velocity
                    missionaryArr[whichMissionary1][1].pos = missionaryArr[whichMissionary1][1].pos + torso.velocity
                    missionaryArr[whichMissionary1][2].pos = missionaryArr[whichMissionary1][2].pos + lLeg.velocity
                    missionaryArr[whichMissionary1][3].pos = missionaryArr[whichMissionary1][3].pos + rLeg.velocity
                    missionaryArr[whichMissionary1][4].pos = missionaryArr[whichMissionary1][4].pos + lArm.velocity
                    missionaryArr[whichMissionary1][5].pos = missionaryArr[whichMissionary1][5].pos + rArm.velocity

                    #move front seat person with boat from start to goal side/cannibal
                if first == 'cannibal':
                    cannibalArr[whichCannibal1][0].pos = cannibalArr[whichCannibal1][0].pos + head.velocity
                    cannibalArr[whichCannibal1][1].pos = cannibalArr[whichCannibal1][1].pos + torso.velocity
                    cannibalArr[whichCannibal1][2].pos = cannibalArr[whichCannibal1][2].pos + lLeg.velocity
                    cannibalArr[whichCannibal1][3].pos = cannibalArr[whichCannibal1][3].pos + rLeg.velocity
                    cannibalArr[whichCannibal1][4].pos = cannibalArr[whichCannibal1][4].pos + lArm.velocity
                    cannibalArr[whichCannibal1][5].pos = cannibalArr[whichCannibal1][5].pos + rArm.velocity
                
                    #move back seat person with boat from start to goal side/missionary                    
                if second == 'missionary':
                    missionaryArr[whichMissionary2][0].pos = missionaryArr[whichMissionary2][0].pos + head.velocity
                    missionaryArr[whichMissionary2][1].pos = missionaryArr[whichMissionary2][1].pos + torso.velocity
                    missionaryArr[whichMissionary2][2].pos = missionaryArr[whichMissionary2][2].pos + lLeg.velocity
                    missionaryArr[whichMissionary2][3].pos = missionaryArr[whichMissionary2][3].pos + rLeg.velocity
                    missionaryArr[whichMissionary2][4].pos = missionaryArr[whichMissionary2][4].pos + lArm.velocity
                    missionaryArr[whichMissionary2][5].pos = missionaryArr[whichMissionary2][5].pos + rArm.velocity
                    
                    #move back seat person with boat from start to goal side/cannibal
                if second == 'cannibal':
                    cannibalArr[whichCannibal2][0].pos = cannibalArr[whichCannibal2][0].pos + head.velocity
                    cannibalArr[whichCannibal2][1].pos = cannibalArr[whichCannibal2][1].pos + torso.velocity
                    cannibalArr[whichCannibal2][2].pos = cannibalArr[whichCannibal2][2].pos + lLeg.velocity
                    cannibalArr[whichCannibal2][3].pos = cannibalArr[whichCannibal2][3].pos + rLeg.velocity
                    cannibalArr[whichCannibal2][4].pos = cannibalArr[whichCannibal2][4].pos + lArm.velocity
                    cannibalArr[whichCannibal2][5].pos = cannibalArr[whichCannibal2][5].pos + rArm.velocity

    rate(1)

        #move a missionary to the goal side if they are in the 'first' seat
    if first == 'missionary':
        i = misGoal.index(0)
        missionaryArr[whichMissionary1][0].pos = (-(CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_MISSIONARYY + 4, CONST_MISSIONARYZ)
        missionaryArr[whichMissionary1][1].pos = (-(CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ)
        missionaryArr[whichMissionary1][2].pos = (-(CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_GROUND, CONST_MISSIONARYZ -.25)
        missionaryArr[whichMissionary1][3].pos = (-(CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_GROUND, CONST_MISSIONARYZ +.25)
        missionaryArr[whichMissionary1][4].pos = (-(CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ - 1)
        missionaryArr[whichMissionary1][5].pos = (-(CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ + 1)
        misGoal[i] = 1
        
        #move a cannibal to the goal side if they are in the 'first' seat
    elif first == 'cannibal':
        i = canGoal.index(0)
        cannibalArr[whichCannibal1][0].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY + 4, CONST_CANNIBALZ)
        cannibalArr[whichCannibal1][1].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ)
        cannibalArr[whichCannibal1][2].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_GROUND, CONST_CANNIBALZ -.25)
        cannibalArr[whichCannibal1][3].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_GROUND, CONST_CANNIBALZ +.25)
        cannibalArr[whichCannibal1][4].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ - 1)
        cannibalArr[whichCannibal1][5].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ + 1)
        canGoal[i] = 1
        #move a missionary to the goal side if they are in the 'second' seat
    if second == 'missionary':
        i = misGoal.index(0)
        missionaryArr[whichMissionary2][0].pos = (-(CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_MISSIONARYY + 4, CONST_MISSIONARYZ)
        missionaryArr[whichMissionary2][1].pos = (-(CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ)
        missionaryArr[whichMissionary2][2].pos = (-(CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_GROUND, CONST_MISSIONARYZ -.25)
        missionaryArr[whichMissionary2][3].pos = (-(CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_GROUND, CONST_MISSIONARYZ +.25)
        missionaryArr[whichMissionary2][4].pos = (-(CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ - 1)
        missionaryArr[whichMissionary2][5].pos = (-(CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ + 1)
        misGoal[i] = 1
        
        #move a cannibal to the goal side if they are in the 'second' seat
    elif second == 'cannibal':
        i = canGoal.index(0)
        cannibalArr[whichCannibal2][0].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY + 4, CONST_CANNIBALZ)
        cannibalArr[whichCannibal2][1].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ)
        cannibalArr[whichCannibal2][2].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_GROUND, CONST_CANNIBALZ -.25)
        cannibalArr[whichCannibal2][3].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_GROUND, CONST_CANNIBALZ +.25)
        cannibalArr[whichCannibal2][4].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ - 1)
        cannibalArr[whichCannibal2][5].pos = (-(CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ + 1)
        canGoal[i] = 1

def moveToStart(first, second):
    whichMissionary1 = 0
    whichCannibal1 = 0
    whichMissionary2 = 0
    whichCannibal2 = 0
    global MIS_X
    global CAN_X
    global misStart
    global misGoal
    global canStart
    global canGoal
    
    if first == 'missionary':
        for i in range (len(missionaries)):
            if missionaries[i] == 0:
                whichMissionary1 = i
                missionaries[i] = 1
                break
                
    if second == 'missionary':
        for i in range (len(missionaries)):
            if missionaries[i] == 0:
                whichMissionary2 = i
                missionaries[i] = 1
                break
        
    if first == 'cannibal':
        for i in range (len(cannibals)):
            if cannibals[i] == 0:
                whichCannibal1 = i
                cannibals[i] = 1
                break
        
    if second == 'cannibal':
        for i in range (len(cannibals)):
            if cannibals[i] == 0:
                whichCannibal2 = i
                cannibals[i] = 1
                break
    
        #move missionary to boat if they are the 'first' item
    if first == 'missionary':
        
        missionaryArr[whichMissionary1][0].pos = (4, CONST_MISSIONARYY + 4, 0)
        missionaryArr[whichMissionary1][1].pos = (4, CONST_MISSIONARYY, 0)
        missionaryArr[whichMissionary1][2].pos = (4, CONST_GROUND, -.25)
        missionaryArr[whichMissionary1][3].pos = (4, CONST_GROUND, +.25)
        missionaryArr[whichMissionary1][4].pos = (4, CONST_MISSIONARYY, - 1)
        missionaryArr[whichMissionary1][5].pos = (4, CONST_MISSIONARYY, + 1)
        i = misGoal.index(1)
        misGoal[i] = 0
        
        #move whichMissionary1 cannibal to boat if they are the 'first' item
    if first == 'cannibal':
        cannibalArr[whichCannibal1][0].pos = (4, CONST_MISSIONARYY + 4, 0)
        cannibalArr[whichCannibal1][1].pos = (4, CONST_MISSIONARYY, 0)
        cannibalArr[whichCannibal1][2].pos = (4, CONST_GROUND, -.25)
        cannibalArr[whichCannibal1][3].pos = (4, CONST_GROUND, +.25)
        cannibalArr[whichCannibal1][4].pos = (4, CONST_MISSIONARYY, - 1)
        cannibalArr[whichCannibal1][5].pos = (4, CONST_MISSIONARYY, + 1)
        i = canGoal.index(1)
        canGoal[i] = 0
        #move whichMissionary1 missionary to boat if they are the 'second' item
    if second == 'missionary':
        missionaryArr[whichMissionary2][0].pos = (6, CONST_MISSIONARYY + 4, 0)
        missionaryArr[whichMissionary2][1].pos = (6, CONST_MISSIONARYY, 0)
        missionaryArr[whichMissionary2][2].pos = (6, CONST_GROUND, -.25)
        missionaryArr[whichMissionary2][3].pos = (6, CONST_GROUND, +.25)
        missionaryArr[whichMissionary2][4].pos = (6, CONST_MISSIONARYY, - 1)
        missionaryArr[whichMissionary2][5].pos = (6, CONST_MISSIONARYY, + 1)
        i = misGoal.index(1)
        misGoal[i] = 0
        #move whichMissionary1 cannibal to boat if they are the 'second' item
    if second == 'cannibal':
        cannibalArr[whichCannibal2][0].pos = (6, CONST_MISSIONARYY + 4, 0)
        cannibalArr[whichCannibal2][1].pos = (6, CONST_MISSIONARYY, 0)
        cannibalArr[whichCannibal2][2].pos = (6, CONST_GROUND, -.25)
        cannibalArr[whichCannibal2][3].pos = (6, CONST_GROUND, +.25)
        cannibalArr[whichCannibal2][4].pos = (6, CONST_MISSIONARYY, - 1)
        cannibalArr[whichCannibal2][5].pos = (6, CONST_MISSIONARYY, + 1)
        i = canGoal.index(1)
        canGoal[i] = 0
        
    base.velocity = vector(1,0,0)
    backSide.velocity = vector(1,0,0)
    frontSide.velocity = vector(1,0,0)
    leftSide.velocity = vector(1,0,0)
    rightSide.velocity = vector(1,0,0)

    head.velocity = vector(1,0,0)
    torso.velocity = vector(1,0,0)
    lLeg.velocity = vector(1,0,0)
    rLeg.velocity = vector(1,0,0)
    lArm.velocity = vector(1,0,0)
    rArm.velocity = vector(1,0,0)
                
    if base.x == -CONST_BOATX:

        if first == 'missionary':
            MIS_X -= 1
        if first == 'cannibal':
            CAN_X -= 1
        if second == 'missionary':
            MIS_X -= 1
        if second == 'cannibal':
            CAN_X -= 1

        if first == 'missionary' and second == 'missionary':
            MIS_X += 1
        if first == 'cannibal' and second == 'cannibal':
            CAN_X += 1
            
        #move boat from goal to start side
        while base.x > CONST_BOATX:
            rate(20)
            base.pos = base.pos - base.velocity
            backSide.pos = backSide.pos - backSide.velocity
            frontSide.pos = frontSide.pos - frontSide.velocity
            leftSide.pos = leftSide.pos - leftSide.velocity
            rightSide.pos = rightSide.pos - rightSide.velocity

                #move front seat person with boat from goal to start side/missionary
            if first == 'missionary':
                missionaryArr[whichMissionary1][0].pos = missionaryArr[whichMissionary1][0].pos - head.velocity
                missionaryArr[whichMissionary1][1].pos = missionaryArr[whichMissionary1][1].pos - torso.velocity
                missionaryArr[whichMissionary1][2].pos = missionaryArr[whichMissionary1][2].pos - lLeg.velocity
                missionaryArr[whichMissionary1][3].pos = missionaryArr[whichMissionary1][3].pos - rLeg.velocity
                missionaryArr[whichMissionary1][4].pos = missionaryArr[whichMissionary1][4].pos - lArm.velocity
                missionaryArr[whichMissionary1][5].pos = missionaryArr[whichMissionary1][5].pos - rArm.velocity
                
                
                #move front seat person with boat from goal to start side/cannibal
            if first == 'cannibal':
                cannibalArr[whichCannibal1][0].pos = cannibalArr[whichCannibal1][0].pos - head.velocity
                cannibalArr[whichCannibal1][1].pos = cannibalArr[whichCannibal1][1].pos - torso.velocity
                cannibalArr[whichCannibal1][2].pos = cannibalArr[whichCannibal1][2].pos - lLeg.velocity
                cannibalArr[whichCannibal1][3].pos = cannibalArr[whichCannibal1][3].pos - rLeg.velocity
                cannibalArr[whichCannibal1][4].pos = cannibalArr[whichCannibal1][4].pos - lArm.velocity
                cannibalArr[whichCannibal1][5].pos = cannibalArr[whichCannibal1][5].pos - rArm.velocity

                #move back seat person with boat from goal to start side/missionary
            if second == 'missionary':
                missionaryArr[whichMissionary2][0].pos = missionaryArr[whichMissionary2][0].pos - head.velocity
                missionaryArr[whichMissionary2][1].pos = missionaryArr[whichMissionary2][1].pos - torso.velocity
                missionaryArr[whichMissionary2][2].pos = missionaryArr[whichMissionary2][2].pos - lLeg.velocity
                missionaryArr[whichMissionary2][3].pos = missionaryArr[whichMissionary2][3].pos - rLeg.velocity
                missionaryArr[whichMissionary2][4].pos = missionaryArr[whichMissionary2][4].pos - lArm.velocity
                missionaryArr[whichMissionary2][5].pos = missionaryArr[whichMissionary2][5].pos - rArm.velocity

                #move back seat person with boat from goal to start side/missionary
            if second == 'cannibal':
                cannibalArr[whichCannibal2][0].pos = cannibalArr[whichCannibal2][0].pos - head.velocity
                cannibalArr[whichCannibal2][1].pos = cannibalArr[whichCannibal2][1].pos - torso.velocity
                cannibalArr[whichCannibal2][2].pos = cannibalArr[whichCannibal2][2].pos - lLeg.velocity
                cannibalArr[whichCannibal2][3].pos = cannibalArr[whichCannibal2][3].pos - rLeg.velocity
                cannibalArr[whichCannibal2][4].pos = cannibalArr[whichCannibal2][4].pos - lArm.velocity
                cannibalArr[whichCannibal2][5].pos = cannibalArr[whichCannibal2][5].pos - rArm.velocity

    rate(1)
    
        #move a missionary to the start side if they are in the 'first' seat               
    if first == 'missionary':
        i = misStart.index(0)
        if i == 0:
            i = 1
        missionaryArr[whichMissionary1][0].pos = ((CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_MISSIONARYY + 4, CONST_MISSIONARYZ)
        missionaryArr[whichMissionary1][1].pos = ((CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ)
        missionaryArr[whichMissionary1][2].pos = ((CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_GROUND, CONST_MISSIONARYZ -.25)
        missionaryArr[whichMissionary1][3].pos = ((CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_GROUND, CONST_MISSIONARYZ +.25)
        missionaryArr[whichMissionary1][4].pos = ((CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ - 1)
        missionaryArr[whichMissionary1][5].pos = ((CONST_MISSIONARYX + (-MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ + 1)
        misStart[i] = 1
        #move a cannibal to the start side if they are in the 'first' seat
    elif first == 'cannibal':
        i = canStart.index(0)
        cannibalArr[whichCannibal1][0].pos = ((CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY + 4, CONST_CANNIBALZ)
        cannibalArr[whichCannibal1][1].pos = ((CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ)
        cannibalArr[whichCannibal1][2].pos = ((CONST_CANNIBALX - (i * 2)), CONST_GROUND, CONST_CANNIBALZ -.25)
        cannibalArr[whichCannibal1][3].pos = ((CONST_CANNIBALX - (i * 2)), CONST_GROUND, CONST_CANNIBALZ +.25)
        cannibalArr[whichCannibal1][4].pos = ((CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ - 1)
        cannibalArr[whichCannibal1][5].pos = ((CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ + 1)
        canStart[i] = 1
        #move a missionary to the start side if they are in the 'second' seat
    if second == 'missionary':
        i = misStart.index(0)
        missionaryArr[whichMissionary2][0].pos = ((CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_MISSIONARYY + 4, CONST_MISSIONARYZ)
        missionaryArr[whichMissionary2][1].pos = ((CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ)
        missionaryArr[whichMissionary2][2].pos = ((CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_GROUND, CONST_MISSIONARYZ -.25)
        missionaryArr[whichMissionary2][3].pos = ((CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_GROUND, CONST_MISSIONARYZ +.25)
        missionaryArr[whichMissionary2][4].pos = ((CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ - 1)
        missionaryArr[whichMissionary2][5].pos = ((CONST_MISSIONARYX + (MIS_X * 2) - (i * 2)), CONST_MISSIONARYY, CONST_MISSIONARYZ + 1)
        misStart[i] = 1
        #move a cannibal to the start side if they are in the 'second' seat
    elif second == 'cannibal':
        i = canStart.index(0)
        cannibalArr[whichCannibal2][0].pos = ((CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY + 4, CONST_CANNIBALZ)
        cannibalArr[whichCannibal2][1].pos = ((CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ)
        cannibalArr[whichCannibal2][2].pos = ((CONST_CANNIBALX - (i * 2)), CONST_GROUND, CONST_CANNIBALZ -.25)
        cannibalArr[whichCannibal2][3].pos = ((CONST_CANNIBALX - (i * 2)), CONST_GROUND, CONST_CANNIBALZ +.25)
        cannibalArr[whichCannibal2][4].pos = ((CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ - 1)
        cannibalArr[whichCannibal2][5].pos = ((CONST_CANNIBALX - (i * 2)), CONST_CANNIBALY, CONST_CANNIBALZ + 1)
        canStart[i] = 1

#create the missionary's    
def createMissionary(i):
    for x in range(i):
        missionaryArr.append([])
        
    for x in range(0, i):
        head = sphere(pos =(CONST_MISSIONARYX +(-x * 2),CONST_MISSIONARYY +4,CONST_MISSIONARYZ),
                      radius = 1, color = color.white)

        torso = cylinder(pos =(CONST_MISSIONARYX +(-x*2), CONST_MISSIONARYY, CONST_MISSIONARYZ),
                         axis = (0,4,0), radius = .5, color = color.cyan)
        lLeg = cylinder(pos = (CONST_MISSIONARYX +(-x*2), CONST_GROUND, CONST_MISSIONARYZ -.25),
                        axis = (0,5,0), radius = .1, color = color.blue)

        rLeg = cylinder(pos = (CONST_MISSIONARYX +(-x*2), CONST_GROUND, CONST_MISSIONARYZ +.25),
                        axis = (0,5,0), radius = .1, color = color.blue)

        lArm = cylinder(pos = (CONST_MISSIONARYX +(-x*2), CONST_MISSIONARYY, CONST_MISSIONARYZ - 1),
                        axis = (0,3,.5), radius = .1, color = color.blue)

        rArm = cylinder(pos = (CONST_MISSIONARYX +(-x*2), CONST_MISSIONARYY, CONST_MISSIONARYZ + 1),
                        axis = (0,3,-.5), radius = .1, color = color.blue)
    
        
        missionaryArr[x].append(head)
        missionaryArr[x].append(torso)
        missionaryArr[x].append(lLeg)
        missionaryArr[x].append(rLeg)
        missionaryArr[x].append(lArm)
        missionaryArr[x].append(rArm)

#create the cannibals
def createCannibal(i):
    for x in range(i):
        cannibalArr.append([])
        
    for x in range(0, i):
        head = sphere(pos =(CONST_CANNIBALX +(-x * 2),CONST_CANNIBALY +4,CONST_CANNIBALZ),
                      radius = 1, color = color.yellow)

        torso = cylinder(pos =(CONST_CANNIBALX +(-x*2), CONST_CANNIBALY, CONST_CANNIBALZ),
                         axis = (0,4,0), radius = .5, color = color.red)
        lLeg = cylinder(pos = (CONST_CANNIBALX +(-x*2), CONST_GROUND, CONST_CANNIBALZ -.25),
                        axis = (0,5,0), radius = .1, color = color.yellow)

        rLeg = cylinder(pos = (CONST_CANNIBALX +(-x*2), CONST_GROUND, CONST_CANNIBALZ +.25),
                        axis = (0,5,0), radius = .1, color = color.yellow)

        lArm = cylinder(pos = (CONST_CANNIBALX +(-x*2), CONST_CANNIBALY, CONST_CANNIBALZ -1),
                        axis = (0,3,.5), radius = .1, color = color.yellow)

        rArm = cylinder(pos = (CONST_CANNIBALX +(-x*2), CONST_CANNIBALY, CONST_CANNIBALZ +1),
                        axis = (0,3,-.5), radius = .1, color = color.yellow)

        cannibalArr[x].append(head)
        cannibalArr[x].append(torso)
        cannibalArr[x].append(lLeg)
        cannibalArr[x].append(rLeg)
        cannibalArr[x].append(lArm)
        cannibalArr[x].append(rArm)



#create the background
ground = box(pos=(0,CONST_GROUND,0), length = 60, height = .5, width =50,
            color = color.green)

river = box(pos=(0,CONST_GROUND,0), length = 20, height = .6, width = 50,
            color = color.blue)

sun = sphere(pos =(0, 30, -50), radius = 10, color = color.yellow)

#create the trees
trunk1 = cylinder(pos =(-25, CONST_GROUND, -20), axis = (0,15, 0), radius = 2,
                 color = CONST_BROWN)

leaves1 = sphere(pos =(-25, 2, -20), radius = 5, color = color.green)

trunk2 = cylinder(pos =(25, CONST_GROUND, -20), axis = (0,15, 0), radius = 2,
                 color = CONST_BROWN)

leaves2 = sphere(pos =(25, 2, -20), radius = 5, color = color.green)

trunk3 = cylinder(pos =(-25, CONST_GROUND, 20), axis = (0,15, 0), radius = 2,
                 color = CONST_BROWN)

leaves3 = sphere(pos =(-25, 2, 20), radius = 5, color = color.green)

trunk4 = cylinder(pos =(25, CONST_GROUND, 20), axis = (0,15, 0), radius = 2,
                 color = CONST_BROWN)

leaves4 = sphere(pos =(25, 2, 20), radius = 5, color = color.green)

#create a person. This is a template for the velocity vectors
head = sphere(pos =(0, 30, -50), radius = 1, color = color.black)
torso = cylinder(pos =(0, 30, -50), axis = (0,4,0), radius = .5, color = color.black)
lLeg = cylinder(pos = (0, 30, -50), axis = (0,5,0), radius = .1, color = color.black)
rLeg = cylinder(pos = (0, 30, -50), axis = (0,5,0), radius = .1, color = color.black)
lArm = cylinder(pos = (0, 30, -50), axis = (0,3,.5), radius = .1, color = color.black)
rArm = cylinder(pos = (0, 30, -50), axis = (0,3,-.5), radius = .1, color = color.black)

#create the boat
base = box(pos=(CONST_BOATX, -9, 0), length = 5, height = .5, width = 3,
           color = CONST_BROWN)
backSide = box(pos=(CONST_BOATX -2.5, -8.75, 0), length = .25, height = 1, width = 3,
            color = CONST_BROWN)
frontSide = box(pos=(CONST_BOATX + 2.5, -8.75, 0), length = .25, height = 1, width = 3,
            color = CONST_BROWN)
leftSide = box(pos=(CONST_BOATX, -8.75, -1.5), length = 5, height = 1, width = .25,
            color = CONST_BROWN)
rightSide = box(pos=(CONST_BOATX, -8.75, 1.5), length = 5, height = 1, width = .25,
            color = CONST_BROWN)

#main()